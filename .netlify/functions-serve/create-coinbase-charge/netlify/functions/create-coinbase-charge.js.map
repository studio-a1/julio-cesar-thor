{
  "version": 3,
  "sources": ["../../../../home/cesar/julio-cesar-thor/netlify/functions/create-coinbase-charge.ts"],
  "sourceRoot": "/tmp/user/1000/tmp-3178137-dVaZES9br1K2",
  "sourcesContent": ["import type { Handler, HandlerEvent } from '@netlify/functions';\n\n// This is a placeholder for the actual Coinbase Commerce SDK/API call\n// In a real project, you would use a library like 'coinbase-commerce-node'\n// or raw fetch calls to the Coinbase Commerce API.\n// For this example, we'll simulate the API call structure.\n\nconst COINBASE_COMMERCE_API_KEY = process.env.COINBASE_COMMERCE_API_KEY!;\nconst COINBASE_API_URL = 'https://api.commerce.coinbase.com/charges';\n\nconst handler: Handler = async (event: HandlerEvent) => {\n  if (event.httpMethod !== 'POST') {\n    return { statusCode: 405, body: 'Method Not Allowed' };\n  }\n\n  try {\n    const { trackName, trackId, price } = JSON.parse(event.body || '{}');\n\n    if (!trackName || !trackId || !price) {\n      return { statusCode: 400, body: JSON.stringify({ error: 'Missing required parameters.' }) };\n    }\n    \n    // Ensure the URL is clean (no trailing slash). Use the built-in Netlify URL variable.\n    const appUrl = process.env.URL?.replace(/\\/$/, '');\n\n    const chargeData = {\n      name: trackName,\n      description: `Purchase of the track: ${trackName}`,\n      local_price: {\n        amount: price,\n        currency: 'USD',\n      },\n      pricing_type: 'fixed_price',\n      metadata: {\n        trackId: trackId,\n        trackName: trackName,\n      },\n      redirect_url: `${appUrl}/success`,\n      // cancel_url: `${appUrl}/`, // Optional\n    };\n    \n    const response = await fetch(COINBASE_API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CC-Api-Key': COINBASE_COMMERCE_API_KEY,\n            'X-CC-Version': '2018-03-22',\n        },\n        body: JSON.stringify(chargeData),\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Coinbase API Error:', errorData);\n        throw new Error('Failed to create Coinbase Commerce charge.');\n    }\n\n    const responseData = await response.json();\n    const charge = responseData.data;\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ hosted_url: charge.hosted_url, code: charge.code }),\n    };\n\n  } catch (error) {\n    console.error(error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: error instanceof Error ? error.message : 'Internal server error.' }),\n    };\n  }\n};\n\nexport { handler };\n\n\n\n\n/*import type { Handler, HandlerEvent } from '@netlify/functions';\n\n// This is a placeholder for the actual Coinbase Commerce SDK/API call\n// In a real project, you would use a library like 'coinbase-commerce-node'\n// or raw fetch calls to the Coinbase Commerce API.\n// For this example, we'll simulate the API call structure.\n\nconst COINBASE_COMMERCE_API_KEY = process.env.COINBASE_COMMERCE_API_KEY!;\nconst COINBASE_API_URL = 'https://api.commerce.coinbase.com/charges';\n\nconst handler: Handler = async (event: HandlerEvent) => {\n  if (event.httpMethod !== 'POST') {\n    return { statusCode: 405, body: 'Method Not Allowed' };\n  }\n\n  try {\n    const { trackName, trackId, price } = JSON.parse(event.body || '{}');\n\n    if (!trackName || !trackId || !price) {\n      return { statusCode: 400, body: JSON.stringify({ error: 'Missing required parameters.' }) };\n    }\n\n    const chargeData = {\n      name: trackName,\n      description: `Purchase of the track: ${trackName}`,\n      local_price: {\n        amount: price,\n        currency: 'USD',\n      },\n      pricing_type: 'fixed_price',\n      metadata: {\n        trackId: trackId,\n        trackName: trackName,\n      },\n      redirect_url: `${process.env.APP_URL}/success`,\n      // cancel_url: `${process.env.APP_URL}/`, // Optional\n    };\n    \n    const response = await fetch(COINBASE_API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CC-Api-Key': COINBASE_COMMERCE_API_KEY,\n            'X-CC-Version': '2018-03-22',\n        },\n        body: JSON.stringify(chargeData),\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Coinbase API Error:', errorData);\n        throw new Error('Failed to create Coinbase Commerce charge.');\n    }\n\n    const responseData = await response.json();\n    const charge = responseData.data;\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ hosted_url: charge.hosted_url, code: charge.code }),\n    };\n\n  } catch (error) {\n    console.error(error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: error instanceof Error ? error.message : 'Internal server error.' }),\n    };\n  }\n};\n\nexport { handler };\n*/\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAM,4BAA4B,QAAQ,IAAI;AAC9C,IAAM,mBAAmB;AAEzB,IAAM,UAAmB,OAAO,UAAwB;AACtD,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO,EAAE,YAAY,KAAK,MAAM,qBAAqB;AAAA,EACvD;AAEA,MAAI;AACF,UAAM,EAAE,WAAW,SAAS,MAAM,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAEnE,QAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO;AACpC,aAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,OAAO,+BAA+B,CAAC,EAAE;AAAA,IAC5F;AAGA,UAAM,SAAS,QAAQ,IAAI,KAAK,QAAQ,OAAO,EAAE;AAEjD,UAAM,aAAa;AAAA,MACjB,MAAM;AAAA,MACN,aAAa,0BAA0B,SAAS;AAAA,MAChD,aAAa;AAAA,QACX,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,cAAc;AAAA,MACd,UAAU;AAAA,QACR;AAAA,QACA;AAAA,MACF;AAAA,MACA,cAAc,GAAG,MAAM;AAAA;AAAA,IAEzB;AAEA,UAAM,WAAW,MAAM,MAAM,kBAAkB;AAAA,MAC3C,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,MACpB;AAAA,MACA,MAAM,KAAK,UAAU,UAAU;AAAA,IACnC,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,YAAY,MAAM,SAAS,KAAK;AACtC,cAAQ,MAAM,uBAAuB,SAAS;AAC9C,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AAEA,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,UAAM,SAAS,aAAa;AAE5B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,YAAY,OAAO,YAAY,MAAM,OAAO,KAAK,CAAC;AAAA,IAC3E;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,KAAK;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,iBAAiB,QAAQ,MAAM,UAAU,yBAAyB,CAAC;AAAA,IACnG;AAAA,EACF;AACF;",
  "names": []
}
